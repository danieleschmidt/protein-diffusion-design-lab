version: '3.8'

services:
  # Main Application Services
  protein-diffusion-api:
    image: protein-diffusion:production-v4.0
    build:
      context: ../../
      dockerfile: deployment/production/Dockerfile.production
      args:
        BUILD_ENV: production
        VERSION: v4.0.0
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://protein_user:${DB_PASSWORD}@postgres:5432/protein_diffusion_prod
      - REDIS_URL=redis://redis:6379/0
      - GPU_ENABLED=true
      - CUDA_VISIBLE_DEVICES=0,1
      - MAX_WORKERS=16
      - ORCHESTRATION_ENABLED=true
      - AUTO_SCALING_ENABLED=true
      - MONITORING_ENABLED=true
      - SECURITY_ENHANCED=true
      - VALIDATION_STRICT=true
    volumes:
      - ./config/production.yaml:/app/config/production.yaml:ro
      - ./logs:/app/logs
      - protein-models:/app/models
      - protein-cache:/app/cache
    networks:
      - protein-network
    depends_on:
      - postgres
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "4.0"
          memory: 8G
        reservations:
          cpus: "2.0"
          memory: 4G
    restart: unless-stopped

  # Real-time Streaming API
  protein-streaming-api:
    image: protein-diffusion:streaming-v4.0
    build:
      context: ../../
      dockerfile: deployment/production/Dockerfile.streaming
    ports:
      - "8765:8765"
    environment:
      - ENVIRONMENT=production
      - WEBSOCKET_HOST=0.0.0.0
      - WEBSOCKET_PORT=8765
      - MAX_CONNECTIONS=1000
      - ENABLE_COMPRESSION=true
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./logs:/app/logs
    networks:
      - protein-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8765"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
    restart: unless-stopped

  # Analytics Dashboard
  protein-analytics:
    image: protein-diffusion:analytics-v4.0
    build:
      context: ../../
      dockerfile: deployment/production/Dockerfile.analytics
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=production
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - DATABASE_URL=postgresql://protein_user:${DB_PASSWORD}@postgres:5432/protein_diffusion_prod
      - ENABLE_REAL_TIME_METRICS=true
    volumes:
      - ./config/analytics.yaml:/app/config/analytics.yaml:ro
      - ./logs:/app/logs
    networks:
      - protein-network
    depends_on:
      - postgres
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 45s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
    restart: unless-stopped

  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=protein_diffusion_prod
      - POSTGRES_USER=protein_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - protein-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U protein_user -d protein_diffusion_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G
    restart: unless-stopped

  # Cache Services
  redis:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - protein-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert_rules.yml:/etc/prometheus/rules/alert_rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - protein-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - protein-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Log Aggregation
  elasticsearch:
    image: elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - protein-network
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
    restart: unless-stopped

  logstash:
    image: logstash:8.8.0
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./config/logstash/config:/usr/share/logstash/config:ro
      - ./logs:/var/log/protein-diffusion:ro
    networks:
      - protein-network
    depends_on:
      - elasticsearch
    environment:
      - "LS_JAVA_OPTS=-Xms1g -Xmx1g"
    restart: unless-stopped

  kibana:
    image: kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=protein-diffusion-kibana
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - protein-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - protein-network
    depends_on:
      - protein-diffusion-api
      - protein-streaming-api
      - protein-analytics
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Background Job Processor
  celery-worker:
    image: protein-diffusion:production-v4.0
    command: celery -A protein_diffusion.celery worker --loglevel=info --concurrency=8
    environment:
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
      - DATABASE_URL=postgresql://protein_user:${DB_PASSWORD}@postgres:5432/protein_diffusion_prod
    volumes:
      - ./config/production.yaml:/app/config/production.yaml:ro
      - ./logs:/app/logs
      - protein-models:/app/models
      - protein-cache:/app/cache
    networks:
      - protein-network
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "6.0"
          memory: 12G
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    image: protein-diffusion:production-v4.0
    command: celery -A protein_diffusion.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
      - DATABASE_URL=postgresql://protein_user:${DB_PASSWORD}@postgres:5432/protein_diffusion_prod
    volumes:
      - ./config/production.yaml:/app/config/production.yaml:ro
      - ./logs:/app/logs
    networks:
      - protein-network
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
    restart: unless-stopped

  # Message Queue Monitor
  flower:
    image: mher/flower:latest
    command: celery -A protein_diffusion.celery flower --broker=redis://redis:6379/2
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    networks:
      - protein-network
    depends_on:
      - redis
    restart: unless-stopped

# Networks
networks:
  protein-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  protein-models:
    driver: local
  protein-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local