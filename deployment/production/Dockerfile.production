# Multi-stage production Dockerfile for Protein Diffusion Design Lab
FROM nvidia/cuda:11.8-devel-ubuntu22.04 AS base

# Build arguments
ARG BUILD_ENV=production
ARG VERSION=v4.0.0

# Environment setup
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV BUILD_ENV=${BUILD_ENV}
ENV VERSION=${VERSION}
ENV CUDA_VISIBLE_DEVICES=0,1

# System dependencies
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3.10-dev \
    python3.10-venv \
    python3-pip \
    build-essential \
    curl \
    wget \
    git \
    vim \
    htop \
    netcat \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Create app user and directories
RUN useradd --create-home --shell /bin/bash protein && \
    mkdir -p /app && \
    chown -R protein:protein /app

# Python environment
RUN python3.10 -m pip install --upgrade pip setuptools wheel

# Install Python dependencies
COPY requirements.txt requirements-dev.txt pyproject.toml /tmp/
RUN pip install --no-cache-dir -r /tmp/requirements.txt && \
    if [ "$BUILD_ENV" = "development" ]; then pip install --no-cache-dir -r /tmp/requirements-dev.txt; fi

# Production optimizations
FROM base AS production-base

# Additional production packages
RUN pip install --no-cache-dir \
    gunicorn[gevent]==21.2.0 \
    uvicorn[standard]==0.23.2 \
    celery[redis]==5.3.1 \
    prometheus-client==0.17.1 \
    opentelemetry-api==1.19.0 \
    opentelemetry-sdk==1.19.0 \
    opentelemetry-instrumentation==0.40b0

# Copy application code
WORKDIR /app
COPY --chown=protein:protein . /app/

# Install the package
RUN pip install -e . --no-deps

# Create necessary directories
RUN mkdir -p /app/logs /app/cache /app/models /app/config && \
    chown -R protein:protein /app

# Configuration files
COPY deployment/production/config/ /app/config/
COPY deployment/production/scripts/ /app/scripts/

# Make scripts executable
RUN chmod +x /app/scripts/*.sh

# Health check script
COPY deployment/production/health_check.py /app/health_check.py
RUN chmod +x /app/health_check.py

# Switch to app user
USER protein

# Expose ports
EXPOSE 8000 8765 8501

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python /app/health_check.py

# Default command
CMD ["/app/scripts/start-production.sh"]

# Development stage
FROM base AS development

# Development dependencies
RUN pip install --no-cache-dir \
    pytest==7.4.0 \
    pytest-cov==4.1.0 \
    pytest-asyncio==0.21.1 \
    black==23.7.0 \
    isort==5.12.0 \
    flake8==6.0.0 \
    mypy==1.5.1 \
    jupyter==1.0.0 \
    ipython==8.14.0

WORKDIR /app
COPY --chown=protein:protein . /app/
RUN pip install -e . --no-deps

USER protein
EXPOSE 8000 8888
CMD ["python", "-m", "protein_diffusion.cli"]

# Testing stage
FROM production-base AS testing

# Copy test files
COPY tests/ /app/tests/
COPY pytest.ini tox.ini /app/

# Run tests
RUN python -m pytest tests/ --cov=src/protein_diffusion --cov-report=html --cov-report=term

# Security scanning stage
FROM production-base AS security-scan

# Install security tools
USER root
RUN pip install --no-cache-dir \
    bandit[toml]==1.7.5 \
    safety==2.3.5 \
    semgrep==1.35.0

USER protein

# Run security scans
RUN bandit -r src/ -f json -o /app/security-report.json || true
RUN safety check --json --output /app/safety-report.json || true

# Final production stage
FROM production-base AS production

# Copy test and security reports (if available)
COPY --from=testing /app/htmlcov /app/coverage-report/ 2>/dev/null || true
COPY --from=security-scan /app/*-report.json /app/reports/ 2>/dev/null || true

# Production environment variables
ENV ENVIRONMENT=production
ENV LOG_LEVEL=INFO
ENV WORKERS=4
ENV WORKER_CLASS=uvicorn.workers.UvicornWorker
ENV MAX_REQUESTS=1000
ENV MAX_REQUESTS_JITTER=100
ENV TIMEOUT=120
ENV KEEPALIVE=5

# Labels for container metadata
LABEL maintainer="Terragon Labs <noreply@terragon.ai>"
LABEL version="${VERSION}"
LABEL environment="${BUILD_ENV}"
LABEL description="Protein Diffusion Design Lab - Production Container"
LABEL org.opencontainers.image.title="Protein Diffusion Design Lab"
LABEL org.opencontainers.image.description="Next-generation protein design platform"
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

# Final user switch
USER protein

# Production startup command
CMD ["/app/scripts/start-production.sh"]