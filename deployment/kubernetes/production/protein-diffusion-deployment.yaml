apiVersion: v1
kind: Namespace
metadata:
  name: protein-diffusion
  labels:
    name: protein-diffusion
    environment: production
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: protein-diffusion-config
  namespace: protein-diffusion
data:
  LOG_LEVEL: "INFO"
  WORKERS: "4"
  MAX_REQUESTS: "1000"
  ENVIRONMENT: "production"
  ENABLE_MONITORING: "true"
  MODEL_CACHE_SIZE: "5000"
  REDIS_URL: "redis://redis-service:6379/0"
  POSTGRES_URL: "postgresql://protein_user:$(POSTGRES_PASSWORD)@postgres-service:5432/protein_db"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: protein-diffusion-secrets
  namespace: protein-diffusion
type: Opaque
stringData:
  POSTGRES_PASSWORD: "CHANGE_ME_IN_PRODUCTION"
  GRAFANA_PASSWORD: "CHANGE_ME_IN_PRODUCTION"
  JWT_SECRET: "CHANGE_ME_IN_PRODUCTION"
---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: protein-diffusion
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: protein-diffusion
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: models-pvc
  namespace: protein-diffusion
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: protein-diffusion
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 200Gi
  storageClassName: standard
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: protein-diffusion
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: protein_db
        - name: POSTGRES_USER
          value: protein_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: protein-diffusion-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - protein_user
            - -d
            - protein_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - protein_user
            - -d
            - protein_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: protein-diffusion
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: protein-diffusion
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "2gb"
        - --maxmemory-policy
        - allkeys-lru
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: protein-diffusion
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Protein Diffusion API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: protein-diffusion-api
  namespace: protein-diffusion
  labels:
    app: protein-diffusion-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: protein-diffusion-api
  template:
    metadata:
      labels:
        app: protein-diffusion-api
    spec:
      containers:
      - name: api
        image: protein-diffusion:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: protein-diffusion-config
        - secretRef:
            name: protein-diffusion-secrets
        volumeMounts:
        - name: models-storage
          mountPath: /app/models
        - name: data-storage
          mountPath: /app/data
        resources:
          requests:
            memory: "4Gi"
            cpu: "1"
            nvidia.com/gpu: "0"
          limits:
            memory: "8Gi"
            cpu: "2"
            nvidia.com/gpu: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
      volumes:
      - name: models-storage
        persistentVolumeClaim:
          claimName: models-pvc
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-pvc
      nodeSelector:
        node-type: gpu-enabled
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
---
# Protein Diffusion API Service
apiVersion: v1
kind: Service
metadata:
  name: protein-diffusion-api-service
  namespace: protein-diffusion
spec:
  selector:
    app: protein-diffusion-api
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Protein Diffusion Web Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: protein-diffusion-web
  namespace: protein-diffusion
  labels:
    app: protein-diffusion-web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: protein-diffusion-web
  template:
    metadata:
      labels:
        app: protein-diffusion-web
    spec:
      containers:
      - name: web
        image: protein-diffusion-web:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8501
        env:
        - name: API_URL
          value: "http://protein-diffusion-api-service:8000"
        - name: ENVIRONMENT
          value: "production"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8501
          initialDelaySeconds: 10
          periodSeconds: 10
---
# Protein Diffusion Web Service
apiVersion: v1
kind: Service
metadata:
  name: protein-diffusion-web-service
  namespace: protein-diffusion
spec:
  selector:
    app: protein-diffusion-web
  ports:
  - name: http
    port: 8501
    targetPort: 8501
  type: ClusterIP
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: protein-diffusion
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=200h
        - --web.enable-lifecycle
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        emptyDir: {}
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: protein-diffusion
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: protein-diffusion
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: protein-diffusion-secrets
              key: GRAFANA_PASSWORD
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: protein-diffusion
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: protein-diffusion-ingress
  namespace: protein-diffusion
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - api.protein-diffusion.example.com
    - app.protein-diffusion.example.com
    - monitoring.protein-diffusion.example.com
    secretName: protein-diffusion-tls
  rules:
  - host: api.protein-diffusion.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: protein-diffusion-api-service
            port:
              number: 8000
  - host: app.protein-diffusion.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: protein-diffusion-web-service
            port:
              number: 8501
  - host: monitoring.protein-diffusion.example.com
    http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
---
# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: protein-diffusion-api-hpa
  namespace: protein-diffusion
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: protein-diffusion-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: protein-diffusion-network-policy
  namespace: protein-diffusion
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8501
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9090
  egress:
  - {} # Allow all outbound traffic
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: protein-diffusion-api-pdb
  namespace: protein-diffusion
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: protein-diffusion-api